#!/usr/bin/env python3

from datetime import timedelta

from coeapps import *


def get_rows(driver, current):
    fmt = current.strftime
    year, month, day = fmt("%Y"), fmt("%b"), fmt("%-d")

    iso_format = current.strftime("%Y%m%d")
    logging.info("starting %s", iso_format)
    driver.implicitly_wait(0.5)

    calendar = driver.find_element(By.ID, "calendar")

    # Year options are generated dynamically in a 21 year range, so
    # we may need to click around to make our year visible.
    while True:
        year_element = calendar.find_element(
            By.CLASS_NAME, "ui-datepicker-year"
        )
        year_select = Select(year_element)
        years = [option.text for option in year_select.options]

        if year < years[0]:
            year_select.select_by_visible_text(years[0])
        if year > years[-1]:
            year_select.select_by_visible_text(years[-1])
        if year in years:
            year_select.select_by_visible_text(year)
            break

    month_element = calendar.find_element(
        By.CLASS_NAME, "ui-datepicker-month"
    )
    month_select = Select(month_element)
    month_select.select_by_visible_text(month)

    day_table = calendar.find_element(By.CLASS_NAME, "ui-datepicker-calendar")
    day_body = day_table.find_element(By.XPATH, "//tbody")
    days = day_body.find_elements(By.XPATH, "//a[@href='#']")
    day_to_click = next(filter(lambda x: x.text == day, days))
    day_to_click.click()

    delay = 10

    def add_datetime(row):
        time = row[2]
        date = current.strftime("%Y-%m-%d")
        logging.debug("adding date %s to time %s", date, time)
        return row + [f"{date} {time}"]

    try:
        wrapper = WebDriverWait(driver, delay).until(
            EC.presence_of_element_located((By.XPATH, "//table[@id='calls']"))
        )

        table = driver.find_element(By.XPATH, "//table[@id='calls']")
        body = table.find_element(By.XPATH, ".//tbody")
        rows = body.find_elements(By.XPATH, ".//tr")

        summary = driver.find_element(
            By.XPATH, "//tr[@id='callSummary']/td/h4"
        ).text
        validate_results(summary, len(rows), iso_format)

        return [add_datetime(row_as_list_of_text(row)) for row in rows]
    except TimeoutException:
        logging.error("%s timeout", iso_format)
        return None


def main():
    file_prefix = "fire-ems"
    parser = new_parser()
    args = parser.parse_args()
    dry_run = args.dry_run
    current, last = get_current_last(args)
    configure_logging("fetch-fire-ems-log.log", args.log_level)
    logging.info("started with %s", args)

    dispatch = "https://coeapps.eugene-or.gov/ruralfirecad"
    header = (
        "event_number",
        "agency",
        "dispatch_time",
        "area",
        "location",
        "city",
        "description",
        "dispatch_datetime",
    )

    if not dry_run:
        driver = get_driver()
        driver.get(dispatch)

    while current <= last:
        path, filename = get_path_and_file(file_prefix, current)
        if dry_run:
            print(filename)
        else:
            try:
                rows = get_rows(driver, current)
                logging.debug("%s got rows", current)
                write_file(path, filename, rows, header)
            except Exception as error:
                logging.error("%s failed to get rows: %s", current, error)
        current = current + timedelta(days=1)

    if not dry_run:
        driver.quit()


if __name__ == "__main__":
    main()
