#!/usr/bin/env python3

import csv
from datetime import datetime, timedelta

from selenium import webdriver
from selenium.common.exceptions import TimeoutException
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC


def get_driver():
    options = webdriver.ChromeOptions()
    options.add_argument("--remote-debugging-pipe")
    options.add_argument("--headless=new")
    return webdriver.Chrome(options=options)


def write_warnings(date, message):
    full_message = f"{date}: {message}\n"
    print(full_message)
    with open("warnings.txt", "a", encoding="utf8") as warnings:
        warnings.write(full_message)


def row_as_list_of_text(row):
    cells = row.find_elements(By.XPATH, ".//td")[1:]
    return [cell.text for cell in cells]


def get_rows(driver, start, end):
    epd_dispatch = "https://coeapps.eugene-or.gov/EPDDispatchLog/Search"
    driver.get(epd_dispatch)
    driver.implicitly_wait(0.5)
    date_from_box = driver.find_element(By.ID, "DateFrom")
    date_through_box = driver.find_element(By.ID, "DateThrough")
    submit_button = driver.find_element(By.XPATH, "//input[@type='submit']")

    date_from_box.send_keys(start)
    date_through_box.send_keys(end)
    submit_button.click()

    delay = 10
    try:
        wrapper = WebDriverWait(driver, delay).until(
            EC.presence_of_element_located((By.XPATH, "//table[@id='calls']"))
        )
        main_ = driver.find_element(By.ID, "main")
        if "Number of search results was reduced to 250" in main_.text:
            write_warnings(start, "results truncated to 250")
        table = driver.find_element(By.XPATH, "//table[@id='calls']")
        body = table.find_element(By.XPATH, ".//tbody")
        rows = body.find_elements(By.XPATH, ".//tr")
        return [row_as_list_of_text(row) for row in rows]
    except TimeoutException:
        write_warnings(start, "timeout")
        return None


def write_file(rows, date):
    output = f"{date}.csv"
    header = [
        "call_time",
        "dispatch_time",
        "incident_desc",
        "disposition",
        "event_number",
        "location",
        "priority",
        "case",
    ]
    with open(output, "w", encoding="utf8") as csvfile:
        writer = csv.writer(csvfile)
        writer.writerow(header)
        writer.writerows(rows)


def main():
    a_day_less_a_minute = timedelta(days=1) - timedelta(minutes=1)
    day_format = "%Y%m%d"
    # 07/01/2013 05:01:34 PM
    web_format = "%m/%d/%Y %I:%M %p"

    driver = get_driver()

    # current = datetime(2013, 11, 18)
    current = datetime(2014, 3, 7)
    last = datetime.now()
    while current <= last:
        start = current.strftime(web_format)
        end = (current + a_day_less_a_minute).strftime(web_format)
        rows = get_rows(driver, start, end)
        write_file(rows, current.strftime(day_format))
        current = current + timedelta(days=1)

    driver.quit()


if __name__ == "__main__":
    main()
